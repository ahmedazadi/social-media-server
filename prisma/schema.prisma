// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(uuid())
  username           String    @unique
  email              String    @unique
  password           String
  last_login         DateTime?
  email_verified     Boolean   @default(false)
  phone              String?
  phone_verified     Boolean   @default(false)
  two_factor_enabled Boolean   @default(false)
  status             Int       @default(1)
  // 1: Active
  // 2: Inactive
  // 3: Deleted

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Post      Post[]
  followers Following[] @relation("follower")
  following Following[] @relation("followed")
  PostLiked PostLiked[]
  Comment   Comment[]

  @@index([email, phone, username])
}

model Following {
  followerId String
  follower   User   @relation("follower", fields: [followerId], references: [id])

  followedId String
  followed   User   @relation("followed", fields: [followedId], references: [id])

  createdAt DateTime @default(now())

  @@id([followerId, followedId])
  @@index([followerId, followedId])
}

model Post {
  id        String      @id @default(uuid())
  author_id String
  author    User        @relation(fields: [author_id], references: [id])
  content   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  publicity Int         @default(1)
  // 1: Public
  // 2: Private
  // 3: Protected
  // 5: Archived
  PostLiked PostLiked[]
  Comment   Comment[]

  @@index([author_id])
}

model PostLiked {
  author_id String
  author    User   @relation(fields: [author_id], references: [id])

  post_id String
  post    Post   @relation(fields: [post_id], references: [id])

  @@id([author_id, post_id])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  post_id String
  post    Post   @relation(fields: [post_id], references: [id])
}
